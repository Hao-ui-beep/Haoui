version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:14-alpine
    container_name: returntotime_db
    environment:
      POSTGRES_DB: returntotime
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - returntotime_network
    restart: unless-stopped

  # Flask后端API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: returntotime_api
    environment:
      FLASK_ENV: production
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-please-change}
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-changeme}@postgres:5432/returntotime
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - returntotime_network
    restart: unless-stopped

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: returntotime_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./index.html:/usr/share/nginx/html/index.html:ro
      - ./api-integration.js:/usr/share/nginx/html/api-integration.js:ro
      - nginx_ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - returntotime_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  nginx_ssl:
    driver: local

networks:
  returntotime_network:
    driver: bridge
